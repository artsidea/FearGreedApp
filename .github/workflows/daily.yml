name: Build daily sentiment

on:
  schedule:
    - cron: '0 22 * * *' # 07:00 KST
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Ensure dirs
        run: mkdir -p docs scripts

      - name: Write fetch script
        run: |
          cat > scripts/fetch_daily.js <<'EOF'
          const fs = require('fs');

          // --- Helpers: resilient fetch with default UA and safe fallbacks ---
          async function fetchJSON(url, headers={}) {
            const ac = new AbortController();
            const t = setTimeout(() => ac.abort(), 15000); // 15s timeout
            const res = await fetch(url, { headers: { 'User-Agent': 'Mozilla/5.0', ...headers }, signal: ac.signal });
            clearTimeout(t);
            if (!res.ok) throw new Error(`HTTP ${res.status} for ${url}`);
            return res.json();
          }
          async function fetchText(url, headers={}) {
            const ac = new AbortController();
            const t = setTimeout(() => ac.abort(), 15000);
            const res = await fetch(url, { headers: { 'User-Agent': 'Mozilla/5.0', ...headers }, signal: ac.signal });
            clearTimeout(t);
            if (!res.ok) throw new Error(`HTTP ${res.status} for ${url}`);
            return res.text();
          }
          async function safeJSON(url) { try { return await fetchJSON(url); } catch { return null; } }
          async function safeText(url) { try { return await fetchText(url); } catch { return null; } }
          function lastNonNull(arr) {
            for (let i = arr.length - 1; i >= 0; i--) {
              if (arr[i] != null) return arr[i];
            }
            return null;
          }
          function cap(x, lo, hi) { return Math.max(lo, Math.min(hi, x)); }
          function clamp01(x) { return Math.max(0, Math.min(1, x)); }

          const DEFAULTS = {
            vix: 20.0,
            currentSP: 5000,
            ma125: 4950,
            bond10Y: 4.0,
            putCall: 0.95,
            junk: 3.5,
            spHigh: 5200,
            spLow: 4200,
            usdCurrent: 103,
            usdHigh: 110,
            usdLow: 95
          };

          (async () => {
            const vixJson = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EVIX?interval=1d&range=1d');
            let vix = DEFAULTS.vix;
            if (vixJson) {
              const vixCloses = vixJson.chart.result[0].indicators.quote[0].close;
              vix = lastNonNull(vixCloses) ?? DEFAULTS.vix;
            }

            const sp6m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=6mo&interval=1d');
            let currentSP = DEFAULTS.currentSP;
            let ma125 = DEFAULTS.ma125;
            if (sp6m) {
              const sp6mCloses = sp6m.chart.result[0].indicators.quote[0].close.filter(v=>v!=null);
              const last125 = sp6mCloses.slice(-125);
              if (last125.length > 0) {
                currentSP = last125[last125.length-1] ?? DEFAULTS.currentSP;
                ma125 = last125.reduce((a,b)=>a+b,0) / last125.length;
              }
            }

            const tnx = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5ETNX?range=1mo&interval=1d');
            let bond10Y = DEFAULTS.bond10Y;
            if (tnx) {
              const tnxCloses = tnx.chart.result[0].indicators.quote[0].close.filter(v=>v!=null);
              bond10Y = tnxCloses[tnxCloses.length-1] ?? DEFAULTS.bond10Y;
            }

            // Put/Call Ratio: use Yahoo Finance ^CPC (fallback ^CPCE) to avoid CBOE 403
            async function fetchPutCallFromYahoo() {
              try {
                const cpc = await fetchJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5ECPC?range=1mo&interval=1d');
                const closes = cpc.chart.result[0].indicators.quote[0].close;
                const v = lastNonNull(closes);
                if (v != null) return v;
              } catch {}
              try {
                const cpce = await fetchJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5ECPCE?range=1mo&interval=1d');
                const closes = cpce.chart.result[0].indicators.quote[0].close;
                const v = lastNonNull(closes);
                if (v != null) return v;
              } catch {}
              return 0.95; // conservative fallback
            }
            const putCall = await fetchPutCallFromYahoo();

            const fredCsv = await safeText('https://fred.stlouisfed.org/graph/fredgraph.csv?id=BAMLH0A0HYM2');
            let junkSpread = DEFAULTS.junk;
            if (fredCsv) {
              const fredLines = fredCsv.trim().split('\n').slice(1);
              for (let i = fredLines.length - 1; i >= 0; i--) {
                const val = parseFloat(fredLines[i].split(',')[1]);
                if (!Number.isNaN(val)) { junkSpread = val; break; }
              }
            }

            const sp1y = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=1y&interval=1d');
            let spHigh = DEFAULTS.spHigh;
            let spLow  = DEFAULTS.spLow;
            if (sp1y) {
              const sp1yCloses = sp1y.chart.result[0].indicators.quote[0].close.filter(v=>v!=null);
              if (sp1yCloses.length > 0) {
                spHigh = Math.max(...sp1yCloses);
                spLow  = Math.min(...sp1yCloses);
              }
            }

            // 7) USD DXY (Dollar Index Futures) 1y for strength/weakness
            const dxy = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/DX=F?range=1y&interval=1d');
            let usdCurrent = DEFAULTS.usdCurrent, usdHigh = DEFAULTS.usdHigh, usdLow = DEFAULTS.usdLow;
            if (dxy) {
              const dxyCloses = dxy.chart.result[0].indicators.quote[0].close.filter(v=>v!=null);
              if (dxyCloses.length > 0) {
                usdCurrent = dxyCloses[dxyCloses.length-1] ?? DEFAULTS.usdCurrent;
                usdHigh = Math.max(...dxyCloses);
                usdLow  = Math.min(...dxyCloses);
              }
            }

            const momentum = (currentSP - ma125) / ma125;
            const sp500MomentumScore = Math.round(Math.max(0, Math.min(100, (momentum * 5 + 0.5) * 100)));

            const vixCapped = cap(vix, 10, 45);
            const vixNorm = (45 - vixCapped) / (45 - 10);
            const vixScore = Math.round(Math.sqrt((vixNorm * 100) * 100));

            const bCapped = cap(bond10Y, 1, 5);
            const bondScore = Math.round(((bCapped - 1) / (5 - 1)) * 100);

            const pCapped = cap(putCall, 0.7, 1.2);
            const putCallScore = Math.round(((1.2 - pCapped) / (1.2 - 0.7)) * 100);

            const jCapped = cap(junkSpread, 2, 8);
            const junkScore = Math.round(((8 - jCapped) / (8 - 2)) * 100);

            const denomHL = (spHigh - spLow);
            const highLowScore = Math.round(clamp01(denomHL !== 0 ? (currentSP - spLow) / denomHL : 0.5) * 100);

            // USD score: stronger USD -> more fear (invert position)
            const denomUsd = (usdHigh - usdLow);
            const usdNorm = clamp01(denomUsd !== 0 ? (usdCurrent - usdLow) / denomUsd : 0.5);
            const usdScore = Math.round((1 - usdNorm) * 100);

            const finalScore = Math.round(
              (sp500MomentumScore + vixScore + bondScore + putCallScore + junkScore + highLowScore + usdScore) / 7
            );

            const asOf = new Date().toISOString().slice(0,10);
            const out = {
              asOf,
              metrics: { vix, currentSP, ma125, bond10Y, putCall, junkSpread, spHigh, spLow, usdDxy: usdCurrent, usdHigh, usdLow },
              scores: { sp500MomentumScore, vixScore, bondScore, putCallScore, junkScore, highLowScore, usdScore, finalScore }
            };

            fs.mkdirSync('docs', { recursive: true });
            fs.writeFileSync('docs/daily.json', JSON.stringify(out, null, 2));
            console.log('Wrote docs/daily.json');
          })().catch(e => {
            console.error('Fetch pipeline failed, writing fallback daily.json', e);
            const vix = DEFAULTS.vix;
            const currentSP = DEFAULTS.currentSP;
            const ma125 = DEFAULTS.ma125;
            const bond10Y = DEFAULTS.bond10Y;
            const putCall = DEFAULTS.putCall;
            const junkSpread = DEFAULTS.junk;
            const spHigh = DEFAULTS.spHigh;
            const spLow = DEFAULTS.spLow;
            const usdCurrent = DEFAULTS.usdCurrent;
            const usdHigh = DEFAULTS.usdHigh;
            const usdLow = DEFAULTS.usdLow;

            const momentum = (currentSP - ma125) / ma125;
            const sp500MomentumScore = Math.round(Math.max(0, Math.min(100, (momentum * 5 + 0.5) * 100)));
            const vixCapped = cap(vix, 10, 45);
            const vixNorm = (45 - vixCapped) / (45 - 10);
            const vixScore = Math.round(Math.sqrt((vixNorm * 100) * 100));
            const bCapped = cap(bond10Y, 1, 5);
            const bondScore = Math.round(((bCapped - 1) / (5 - 1)) * 100);
            const pCapped = cap(putCall, 0.7, 1.2);
            const putCallScore = Math.round(((1.2 - pCapped) / (1.2 - 0.7)) * 100);
            const jCapped = cap(junkSpread, 2, 8);
            const junkScore = Math.round(((8 - jCapped) / (8 - 2)) * 100);
            const denomHL = (spHigh - spLow);
            const highLowScore = Math.round(clamp01(denomHL !== 0 ? (currentSP - spLow) / denomHL : 0.5) * 100);
            const denomUsd = (usdHigh - usdLow);
            const usdNorm = clamp01(denomUsd !== 0 ? (usdCurrent - usdLow) / denomUsd : 0.5);
            const usdScore = Math.round((1 - usdNorm) * 100);
            const finalScore = Math.round((sp500MomentumScore + vixScore + bondScore + putCallScore + junkScore + highLowScore + usdScore) / 7);

            const asOf = new Date().toISOString().slice(0,10);
            const out = {
              asOf,
              metrics: { vix, currentSP, ma125, bond10Y, putCall, junkSpread, spHigh, spLow, usdDxy: usdCurrent, usdHigh, usdLow },
              scores: { sp500MomentumScore, vixScore, bondScore, putCallScore, junkScore, highLowScore, usdScore, finalScore }
            };
            fs.mkdirSync('docs', { recursive: true });
            fs.writeFileSync('docs/daily.json', JSON.stringify(out, null, 2));
            console.log('Wrote fallback docs/daily.json');
            process.exit(0);
          });
          EOF

      - name: Build daily.json
        run: node scripts/fetch_daily.js

      - name: Commit and push
        uses: EndBug/add-and-commit@v9
        with:
          add: 'docs/daily.json'
          message: 'chore: update daily sentiment'
          default_author: github_actions


