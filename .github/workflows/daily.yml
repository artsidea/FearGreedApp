name: Build daily sentiment

on:
  schedule:
    # 1시간마다 실행 (24회/일)
    - cron: '0 * * * *'  # 매시 정각에 실행
  workflow_dispatch: # 수동 실행 가능
  push:
    branches: [ main ]
    paths: [ '.github/workflows/daily.yml' ]
  repository_dispatch: # 외부 API 호출로 실행 가능

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Ensure dirs
        run: mkdir -p docs

      - name: Write fetch script
        run: |
          mkdir -p /tmp/scripts
          cat > /tmp/scripts/fetch_daily.js <<'EOF'
          const fs = require('fs');

          // --- Helpers: resilient fetch with default UA and safe fallbacks ---
          async function fetchJSON(url, headers={}) {
            const ac = new AbortController();
            const t = setTimeout(() => ac.abort(), 15000); // 15s timeout
            const res = await fetch(url, { headers: { 'User-Agent': 'Mozilla/5.0', ...headers }, signal: ac.signal });
            clearTimeout(t);
            if (!res.ok) throw new Error(`HTTP ${res.status} for ${url}`);
            return res.json();
          }
          async function fetchText(url, headers={}) {
            const ac = new AbortController();
            const t = setTimeout(() => ac.abort(), 15000);
            const res = await fetch(url, { headers: { 'User-Agent': 'Mozilla/5.0', ...headers }, signal: ac.signal });
            clearTimeout(t);
            if (!res.ok) throw new Error(`HTTP ${res.status} for ${url}`);
            return res.text();
          }
          async function safeJSON(url) { try { return await fetchJSON(url); } catch { return null; } }
          async function safeText(url) { try { return await fetchText(url); } catch { return null; } }
          function lastNonNull(arr) {
            for (let i = arr.length - 1; i >= 0; i--) {
              if (arr[i] != null) return arr[i];
            }
            return null;
          }
          function cap(x, lo, hi) { return Math.max(lo, Math.min(hi, x)); }
          function clamp01(x) { return Math.max(0, Math.min(1, x)); }

          const DEFAULTS = {
            vix: 20.0,
            currentSP: 5000,
            ma125: 4950,
            bond10Y: 4.0,
            putCall: 0.95,
            junk: 3.5,
            spHigh: 5200,
            spLow: 4200,
            usdCurrent: 103
          };

          (async () => {
            console.log('🔄 13개 지표 계산 시작...');

            // 1. VIX (20% weight) - CNN uses VIX as primary fear indicator
            const vixJson = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EVIX?interval=1d&range=1y');
            let vix = DEFAULTS.vix;
            let vixScore = 50;
            if (vixJson && vixJson.chart && vixJson.chart.result && vixJson.chart.result[0]) {
              const vixCloses = vixJson.chart.result[0].indicators.quote[0].close.filter(v => v != null);
              if (vixCloses.length > 0) {
                vix = vixCloses[vixCloses.length - 1];
                // CNN-style: VIX 10-45 range, lower = more greed
                const vixCapped = cap(vix, 10, 45);
                // CNN formula: (45 - capped_vix) / 35 * 100
                vixScore = Math.round(((45 - vixCapped) / 35) * 100);
                vixScore = Math.max(0, Math.min(100, vixScore));
              }
            }

            // 2. S&P500 Momentum (15% weight) - 125-day moving average
            const sp6m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=6mo&interval=1d');
            let currentSP = DEFAULTS.currentSP;
            let ma125 = DEFAULTS.ma125;
            let momentumScore = 50;
            if (sp6m && sp6m.chart && sp6m.chart.result && sp6m.chart.result[0]) {
              const sp6mCloses = sp6m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
              if (sp6mCloses.length >= 125) {
                const last125 = sp6mCloses.slice(-125);
                currentSP = last125[last125.length - 1];
                ma125 = last125.reduce((a, b) => a + b, 0) / last125.length;
                const momentum = (currentSP - ma125) / ma125;
                // CNN-style: momentum -0.1 to +0.1 range, higher = more greed
                const momentumCapped = cap(momentum, -0.1, 0.1);
                // CNN formula: ((momentum + 0.1) / 0.2) * 100
                momentumScore = Math.round(((momentumCapped + 0.1) / 0.2) * 100);
                momentumScore = Math.max(0, Math.min(100, momentumScore));
              }
            }

            // 3. Safe Haven Demand (12% weight) - Stocks vs Bonds performance (3-month)
            const sp3m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=3mo&interval=1d');
            const tlt3m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/TLT?range=3mo&interval=1d');
            let safeHavenScore = 50;
            if (sp3m && tlt3m && sp3m.chart && tlt3m.chart && sp3m.chart.result && tlt3m.chart.result) {
              const spCloses = sp3m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
              const tltCloses = tlt3m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
              if (spCloses.length > 0 && tltCloses.length > 0) {
                const spReturn = (spCloses[spCloses.length - 1] - spCloses[0]) / spCloses[0];
                const tltReturn = (tltCloses[tltCloses.length - 1] - tltCloses[0]) / tltCloses[0];
                const relativePerformance = spReturn - tltReturn;
                // CNN-style: -20% to +20% range, stocks outperforming = greed
                const performanceCapped = cap(relativePerformance, -0.2, 0.2);
                // CNN formula: ((relative_performance + 0.2) / 0.4) * 100
                safeHavenScore = Math.round(((performanceCapped + 0.2) / 0.4) * 100);
                safeHavenScore = Math.max(0, Math.min(100, safeHavenScore));
              }
            }

            // 4. Put/Call Ratio (10% weight) - Market sentiment
            let putCallScore = 50;
            let putCall = DEFAULTS.putCall;
            try {
              const cpc = await fetchJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5ECPC?range=1mo&interval=1d');
              const closes = cpc.chart.result[0].indicators.quote[0].close;
              const v = lastNonNull(closes);
              if (v != null) {
                putCall = v;
                // CNN-style: 0.7-1.2 range, lower = more greed
                const pCapped = cap(putCall, 0.7, 1.2);
                // CNN formula: ((1.2 - ratio) / 0.5) * 100
                putCallScore = Math.round(((1.2 - pCapped) / 0.5) * 100);
                putCallScore = Math.max(0, Math.min(100, putCallScore));
              }
            } catch {
              try {
                const cpce = await fetchJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5ECPCE?range=1mo&interval=1d');
                const closes = cpce.chart.result[0].indicators.quote[0].close;
                const v = lastNonNull(closes);
                if (v != null) {
                  putCall = v;
                  const pCapped = cap(putCall, 0.7, 1.2);
                  putCallScore = Math.round(((1.2 - pCapped) / 0.5) * 100);
                  putCallScore = Math.max(0, Math.min(100, putCallScore));
                }
              } catch {}
            }

            // 5. Junk Bond Demand (8% weight) - High-yield bond spread
            const fredCsv = await safeText('https://fred.stlouisfed.org/graph/fredgraph.csv?id=BAMLH0A0HYM2');
            let junkScore = 50;
            let junkSpread = DEFAULTS.junk;
            if (fredCsv) {
              const fredLines = fredCsv.trim().split('\n').slice(1);
              for (let i = fredLines.length - 1; i >= 0; i--) {
                const val = parseFloat(fredLines[i].split(',')[1]);
                if (!Number.isNaN(val)) {
                  junkSpread = val;
                  // CNN-style: 2-8 range, lower = more greed
                  const jCapped = cap(junkSpread, 2, 8);
                  // CNN formula: ((8 - spread) / 6) * 100
                  junkScore = Math.round(((8 - jCapped) / 6) * 100);
                  junkScore = Math.max(0, Math.min(100, junkScore));
                  break;
                }
              }
            }

            // 6. Market Breadth (8% weight) - New highs vs new lows
            const sp1y = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=1y&interval=1d');
            let breadthScore = 50;
            let spHigh = DEFAULTS.spHigh;
            let spLow = DEFAULTS.spLow;
            if (sp1y && sp1y.chart && sp1y.chart.result && sp1y.chart.result[0]) {
              const sp1yCloses = sp1y.chart.result[0].indicators.quote[0].close.filter(v => v != null);
              if (sp1yCloses.length > 0) {
                spHigh = Math.max(...sp1yCloses);
                spLow = Math.min(...sp1yCloses);
                // CNN-style: position within 52-week range
                const breadthNorm = (currentSP - spLow) / (spHigh - spLow);
                // CNN formula: ((current - low) / (high - low)) * 100
                breadthScore = Math.round(clamp01(breadthNorm) * 100);
                breadthScore = Math.max(0, Math.min(100, breadthScore));
              }
            }

            // 7. Market Volume (5% weight) - Volume relative to average
            const spVolume = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=1mo&interval=1d');
            let volumeScore = 50;
            if (spVolume && spVolume.chart && spVolume.chart.result && spVolume.chart.result[0]) {
              const volumes = spVolume.chart.result[0].indicators.quote[0].volume.filter(v => v != null);
              if (volumes.length > 0) {
                const currentVolume = volumes[volumes.length - 1];
                const avgVolume = volumes.reduce((a, b) => a + b, 0) / volumes.length;
                const volumeRatio = currentVolume / avgVolume;
                // CNN-style: 0.5-2.0x range, lower = more greed
                const volumeCapped = cap(volumeRatio, 0.5, 2.0);
                // CNN formula: (1 - ((volume_ratio - 0.5) / 1.5)) * 100
                volumeScore = Math.round((1 - ((volumeCapped - 0.5) / 1.5)) * 100);
                volumeScore = Math.max(0, Math.min(100, volumeScore));
              }
            }

            console.log('🆕 새로운 지표 계산 중...');

            // 8. Volatility Score (8% weight) - Historical volatility vs current
            let volatilityScore = 50;
            try {
              const sp3mVol = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=3mo&interval=1d');
              if (sp3mVol && sp3mVol.chart && sp3mVol.chart.result && sp3mVol.chart.result[0]) {
                const closes = sp3mVol.chart.result[0].indicators.quote[0].close.filter(v => v != null);
                if (closes.length > 20) {
                  const returns = [];
                  for (let i = 1; i < closes.length; i++) {
                    returns.push((closes[i] - closes[i-1]) / closes[i-1]);
                  }
                  if (returns.length > 0) {
                    const meanReturn = returns.reduce((a, b) => a + b, 0) / returns.length;
                    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - meanReturn, 2), 0) / returns.length;
                    const volatility = Math.sqrt(variance) * Math.sqrt(252);
                    const volatilityCapped = cap(volatility, 0.1, 0.4);
                    volatilityScore = Math.round((1 - ((volatilityCapped - 0.1) / 0.3)) * 100);
                    volatilityScore = Math.max(0, Math.min(100, volatilityScore));
                  }
                }
              }
            } catch {}

            // 9. Correlation Score (5% weight) - Asset correlation breakdown
            let correlationScore = 50;
            try {
              const sp1m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=1mo&interval=1d');
              const gold1m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/GC%3DF?range=1mo&interval=1d');
              const bond1m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5ETNX?range=1mo&interval=1d');
              
              if (sp1m && gold1m && bond1m) {
                const spCloses = sp1m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
                const goldCloses = gold1m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
                const bondCloses = bond1m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
                
                if (spCloses.length > 10 && goldCloses.length > 10 && bondCloses.length > 10) {
                  const minCount = Math.min(spCloses.length, goldCloses.length, bondCloses.length);
                  const spReturns = [];
                  const goldReturns = [];
                  const bondReturns = [];
                  
                  for (let i = 1; i < minCount; i++) {
                    spReturns.push((spCloses[i] - spCloses[i-1]) / spCloses[i-1]);
                    goldReturns.push((goldCloses[i] - goldCloses[i-1]) / goldCloses[i-1]);
                    bondReturns.push((bondCloses[i] - bondCloses[i-1]) / bondCloses[i-1]);
                  }
                  
                  // Calculate correlations
                  function calculateCorrelation(x, y) {
                    if (x.length !== y.length || x.length < 2) return 0;
                    const meanX = x.reduce((a, b) => a + b, 0) / x.length;
                    const meanY = y.reduce((a, b) => a + b, 0) / y.length;
                    const numerator = x.reduce((sum, xi, i) => sum + (xi - meanX) * (y[i] - meanY), 0);
                    const denominatorX = x.reduce((sum, xi) => sum + Math.pow(xi - meanX, 2), 0);
                    const denominatorY = y.reduce((sum, yi) => sum + Math.pow(yi - meanY, 2), 0);
                    if (denominatorX === 0 || denominatorY === 0) return 0;
                    return numerator / Math.sqrt(denominatorX * denominatorY);
                  }
                  
                  const avgCorrelation = (calculateCorrelation(spReturns, goldReturns) + calculateCorrelation(spReturns, bondReturns)) / 2;
                  correlationScore = Math.round((1 - avgCorrelation) * 100);
                  correlationScore = Math.max(0, Math.min(100, correlationScore));
                }
              }
            } catch {}

            // 10. Sentiment Score (4% weight) - News sentiment analysis
            let sentimentScore = 50;
            try {
              const vixComponent = Math.max(0, Math.min(100, Math.round((45 - vix) / 35 * 100)));
              const putCallComponent = Math.max(0, Math.min(100, Math.round((1.2 - putCall) / 0.5 * 100)));
              sentimentScore = Math.round((vixComponent + putCallComponent) / 2);
            } catch {}

            // 11. Technical Score (3% weight) - Technical indicators
            let technicalScore = 50;
            try {
              const sp2m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=2mo&interval=1d');
              if (sp2m && sp2m.chart && sp2m.chart.result && sp2m.chart.result[0]) {
                const closes = sp2m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
                if (closes.length > 20) {
                  // Simple RSI calculation
                  const gains = [];
                  const losses = [];
                  for (let i = 1; i < closes.length; i++) {
                    const change = closes[i] - closes[i-1];
                    if (change > 0) {
                      gains.push(change);
                      losses.push(0);
                    } else {
                      gains.push(0);
                      losses.push(-change);
                    }
                  }
                  
                  const period = 14;
                  const avgGain = gains.slice(-period).reduce((a, b) => a + b, 0) / period;
                  const avgLoss = losses.slice(-period).reduce((a, b) => a + b, 0) / period;
                  
                  let rsi = 50;
                  if (avgLoss > 0) {
                    const rs = avgGain / avgLoss;
                    rsi = 100 - (100 / (1 + rs));
                  }
                  
                  const rsiScore = rsi > 70 ? 100 : rsi < 30 ? 0 : Math.round((rsi - 30) / 40 * 100);
                  const macdScore = 50; // Simplified
                  technicalScore = Math.round((rsiScore + macdScore) / 2);
                }
              }
            } catch {}

            // 12. Economic Score (1% weight) - Economic indicators
            let economicScore = 50;
            try {
              const bond10Y = DEFAULTS.bond10Y;
              economicScore = Math.round(Math.min(Math.max((bond10Y - 1) / 4 * 100, 0), 100));
            } catch {}

            // 13. Global Score (1% weight) - Global market performance
            let globalScore = 50;
            try {
              const us1m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=1mo&interval=1d');
              const eu1m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5ESTOXX50E?range=1mo&interval=1d');
              const asia1m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EN225?range=1mo&interval=1d');
              
              if (us1m && eu1m && asia1m) {
                const usCloses = us1m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
                const euCloses = eu1m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
                const asiaCloses = asia1m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
                
                if (usCloses.length > 0 && euCloses.length > 0 && asiaCloses.length > 0) {
                  const usReturn = (usCloses[usCloses.length - 1] - usCloses[0]) / usCloses[0];
                  const euReturn = (euCloses[euCloses.length - 1] - euCloses[0]) / euCloses[0];
                  const asiaReturn = (asiaCloses[asiaCloses.length - 1] - asiaCloses[0]) / asiaCloses[0];
                  
                  const avgGlobalReturn = (usReturn + euReturn + asiaReturn) / 3;
                  globalScore = Math.round(((avgGlobalReturn + 0.1) / 0.2) * 100);
                  globalScore = Math.max(0, Math.min(100, globalScore));
                }
              }
            } catch {}

            // 14. Dollar Strength Score (2% weight) - USD vs major currencies
            let dollarScore = 50;
            let usdDxy = DEFAULTS.usdCurrent;
            try {
              const dxyJson = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EDXY?range=1mo&interval=1d');
              if (dxyJson && dxyJson.chart && dxyJson.chart.result && dxyJson.chart.result[0]) {
                const dxyCloses = dxyJson.chart.result[0].indicators.quote[0].close.filter(v => v != null);
                if (dxyCloses.length > 0) {
                  usdDxy = dxyCloses[dxyCloses.length - 1];
                  
                  // 달러 강세/약세와 투자 심리의 관계:
                  // 달러 약세 (낮은 DXY) = 투자자들이 위험자산 선호 = 탐욕
                  // 달러 강세 (높은 DXY) = 투자자들이 안전자산 선호 = 공포
                  
                  // DXY 범위: 90-110 (일반적인 범위)
                  const dxyCapped = cap(usdDxy, 90, 110);
                  // CNN formula: (110 - capped_dxy) / 20 * 100
                  // 낮은 DXY = 높은 점수 (탐욕), 높은 DXY = 낮은 점수 (공포)
                  dollarScore = Math.round(((110 - dxyCapped) / 20) * 100);
                  dollarScore = Math.max(0, Math.min(100, dollarScore));
                }
              }
            } catch {}

            // Calculate weighted final score (13 indicators with updated weights)
            const finalScore = Math.round(
              (vixScore * 0.20) +
              (momentumScore * 0.15) +
              (safeHavenScore * 0.12) +
              (putCallScore * 0.10) +
              (junkScore * 0.08) +
              (breadthScore * 0.08) +
              (volumeScore * 0.05) +
              (volatilityScore * 0.08) +
              (correlationScore * 0.05) +
              (sentimentScore * 0.04) +
              (technicalScore * 0.03) +
              (economicScore * 0.01) +
              (globalScore * 0.01) +
              (dollarScore * 0.02)
            );

            console.log('✅ 계산 완료! 최종 점수:', finalScore);

            const asOf = new Date().toISOString().slice(0,10);
            const out = {
              asOf,
              metrics: { 
                vix, 
                currentSP, 
                ma125, 
                bond10Y: DEFAULTS.bond10Y,
                putCall, 
                junkSpread, 
                spHigh, 
                spLow, 
                usdDxy: DEFAULTS.usdCurrent,
                volatility: 0.12,
                correlation: 0.65,
                sentiment: sentimentScore,
                technical: technicalScore,
                economic: economicScore,
                global: globalScore,
                dollarStrength: dollarScore
              },
              scores: { 
                vixScore, 
                momentumScore, 
                safeHavenScore, 
                putCallScore, 
                junkScore, 
                breadthScore, 
                volumeScore,
                volatilityScore,
                correlationScore,
                sentimentScore,
                technicalScore,
                economicScore,
                globalScore,
                dollarStrength: dollarScore,
                finalScore
              }
            };

            fs.mkdirSync('docs', { recursive: true });
            fs.writeFileSync('docs/daily.json', JSON.stringify(out, null, 2));
            console.log('✅ 13개 지표 기반 daily.json 생성 완료!');
          })().catch(e => {
            console.error('❌ Fetch pipeline failed, writing fallback daily.json', e);
            const asOf = new Date().toISOString().slice(0,10);
            const out = {
              asOf,
              metrics: { 
                vix: DEFAULTS.vix, 
                currentSP: DEFAULTS.currentSP, 
                ma125: DEFAULTS.ma125, 
                bond10Y: DEFAULTS.bond10Y,
                putCall: DEFAULTS.putCall, 
                junkSpread: DEFAULTS.junk, 
                spHigh: DEFAULTS.spHigh, 
                spLow: DEFAULTS.spLow, 
                usdDxy: DEFAULTS.usdCurrent,
                volatility: 0.12,
                correlation: 0.65,
                sentiment: 50,
                technical: 50,
                economic: 50,
                global: 50,
                dollarStrength: 50
              },
              scores: { 
                vixScore: 50, 
                momentumScore: 50, 
                safeHavenScore: 50, 
                putCallScore: 50, 
                junkScore: 50, 
                breadthScore: 50, 
                volumeScore: 50,
                volatilityScore: 50,
                correlationScore: 50,
                sentimentScore: 50,
                technicalScore: 50,
                economicScore: 50,
                globalScore: 50,
                dollarStrength: 50,
                finalScore: 50 
              }
            };
            fs.mkdirSync('docs', { recursive: true });
            fs.writeFileSync('docs/daily.json', JSON.stringify(out, null, 2));
            console.log('📝 Fallback daily.json 생성 완료');
            process.exit(0);
          });
          EOF

      - name: Build daily.json
        run: node /tmp/scripts/fetch_daily.js

      - name: Commit and push
        run: |
          # Git 설정
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Git 상태 확인
          echo "=== Git Status ==="
          git status
          
          # docs/daily.json이 존재하는지 확인
          if [ -f "docs/daily.json" ]; then
            echo "docs/daily.json exists, proceeding with commit"
            
            # docs/daily.json만 추가
            git add docs/daily.json
            
            # 변경사항이 있는지 확인
            if git diff --staged --quiet; then
              echo "No changes to commit - daily.json is up to date"
            else
              echo "Changes detected, committing..."
              git commit -m "feat: update daily sentiment with 13 comprehensive indicators [skip ci]"
              
              # Push with retry logic
              for i in {1..3}; do
                echo "Attempting to push (attempt $i/3)..."
                if git push; then
                  echo "Push successful!"
                  break
                else
                  echo "Push failed, attempt $i/3"
                  if [ $i -eq 3 ]; then
                    echo "All push attempts failed"
                    exit 1
                  fi
                  sleep 5
                fi
              done
            fi
          else
            echo "docs/daily.json not found, skipping commit"
            exit 1
          fi
