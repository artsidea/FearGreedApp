name: Build daily sentiment

on:
  schedule:
    - cron: '0 22 * * *' # 07:00 KST (22:00 UTC)
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/daily.yml' ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Ensure dirs
        run: mkdir -p docs

      - name: Write fetch script
        run: |
          mkdir -p /tmp/scripts
          cat > /tmp/scripts/fetch_daily.js <<'EOF'
          const fs = require('fs');

          // --- Helpers: resilient fetch with default UA and safe fallbacks ---
          async function fetchJSON(url, headers={}) {
            const ac = new AbortController();
            const t = setTimeout(() => ac.abort(), 15000); // 15s timeout
            const res = await fetch(url, { headers: { 'User-Agent': 'Mozilla/5.0', ...headers }, signal: ac.signal });
            clearTimeout(t);
            if (!res.ok) throw new Error(`HTTP ${res.status} for ${url}`);
            return res.json();
          }
          async function fetchText(url, headers={}) {
            const ac = new AbortController();
            const t = setTimeout(() => ac.abort(), 15000);
            const res = await fetch(url, { headers: { 'User-Agent': 'Mozilla/5.0', ...headers }, signal: ac.signal });
            clearTimeout(t);
            if (!res.ok) throw new Error(`HTTP ${res.status} for ${url}`);
            return res.text();
          }
          async function safeJSON(url) { try { return await fetchJSON(url); } catch { return null; } }
          async function safeText(url) { try { return await fetchText(url); } catch { return null; } }
          function lastNonNull(arr) {
            for (let i = arr.length - 1; i >= 0; i--) {
              if (arr[i] != null) return arr[i];
            }
            return null;
          }
          function cap(x, lo, hi) { return Math.max(lo, Math.min(hi, x)); }
          function clamp01(x) { return Math.max(0, Math.min(1, x)); }
          
          // CNN-style percentile calculation
          function calculatePercentile(value, historicalValues) {
            if (historicalValues.length === 0) return 50;
            const sorted = [...historicalValues].sort((a, b) => a - b);
            const index = sorted.findIndex(v => v >= value);
            if (index === -1) return 100;
            if (index === 0) return 0;
            return (index / sorted.length) * 100;
          }
          
          // CNN-style smoothing (7-day EMA)
          function smoothScore(currentScore, previousScores = []) {
            if (previousScores.length === 0) return currentScore;
            const alpha = 2 / (7 + 1); // 7-day EMA
            let smoothed = currentScore;
            for (let i = previousScores.length - 1; i >= 0; i--) {
              smoothed = alpha * previousScores[i] + (1 - alpha) * smoothed;
            }
            return Math.round(smoothed);
          }

          const DEFAULTS = {
            vix: 20.0,
            currentSP: 5000,
            ma125: 4950,
            bond10Y: 4.0,
            putCall: 0.95,
            junk: 3.5,
            spHigh: 5200,
            spLow: 4200,
            usdCurrent: 103,
            usdHigh: 110,
            usdLow: 95
          };

          (async () => {
            // 1. VIX (25% weight) - CNN uses VIX as primary fear indicator
            const vixJson = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EVIX?interval=1d&range=1y');
            let vix = DEFAULTS.vix;
            let vixScore = 50;
            if (vixJson && vixJson.chart && vixJson.chart.result && vixJson.chart.result[0]) {
              const vixCloses = vixJson.chart.result[0].indicators.quote[0].close.filter(v => v != null);
              if (vixCloses.length > 0) {
                vix = vixCloses[vixCloses.length - 1];
                // CNN-style: VIX 10-45 range, lower = more greed, with square root scaling
                const vixCapped = cap(vix, 10, 45);
                const vixNorm = (45 - vixCapped) / (45 - 10);
                vixScore = Math.round(Math.sqrt(vixNorm * 100) * 10);
              }
            }

            // 2. S&P500 Momentum (20% weight) - 125-day moving average
            const sp6m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=6mo&interval=1d');
            let currentSP = DEFAULTS.currentSP;
            let ma125 = DEFAULTS.ma125;
            let momentumScore = 50;
            if (sp6m && sp6m.chart && sp6m.chart.result && sp6m.chart.result[0]) {
              const sp6mCloses = sp6m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
              if (sp6mCloses.length >= 125) {
                const last125 = sp6mCloses.slice(-125);
                currentSP = last125[last125.length - 1];
                ma125 = last125.reduce((a, b) => a + b, 0) / last125.length;
                const momentum = (currentSP - ma125) / ma125;
                // CNN-style: momentum -0.15 to +0.15 range, capped (wider range)
                const momentumCapped = cap(momentum, -0.15, 0.15);
                const momentumNorm = (momentumCapped + 0.15) / 0.3;
                momentumScore = Math.round(momentumNorm * 100);
              }
            }

            // 3. Safe Haven Demand (15% weight) - Stocks vs Bonds performance (3-month)
            const sp3m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=3mo&interval=1d');
            const tlt3m = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/TLT?range=3mo&interval=1d');
            let safeHavenScore = 50;
            if (sp3m && tlt3m && sp3m.chart && tlt3m.chart && sp3m.chart.result && tlt3m.chart.result) {
              const spCloses = sp3m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
              const tltCloses = tlt3m.chart.result[0].indicators.quote[0].close.filter(v => v != null);
              if (spCloses.length > 0 && tltCloses.length > 0) {
                const spReturn = (spCloses[spCloses.length - 1] - spCloses[0]) / spCloses[0];
                const tltReturn = (tltCloses[tltCloses.length - 1] - tltCloses[0]) / tltCloses[0];
                const relativePerformance = spReturn - tltReturn;
                // CNN-style: bonds outperforming stocks = fear, stocks outperforming = greed
                // Narrower range for more conservative calculation
                const performanceCapped = cap(relativePerformance, -0.15, 0.15);
                const performanceNorm = (performanceCapped + 0.15) / 0.3;
                safeHavenScore = Math.round(performanceNorm * 100);
              }
            }

            // 4. Put/Call Ratio (15% weight) - Market sentiment
            let putCallScore = 50;
            let putCall = DEFAULTS.putCall;
            try {
              const cpc = await fetchJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5ECPC?range=1mo&interval=1d');
              const closes = cpc.chart.result[0].indicators.quote[0].close;
              const v = lastNonNull(closes);
              if (v != null) {
                putCall = v;
                // CNN-style: 0.7-1.2 range, higher = more fear, more conservative
                const pCapped = cap(putCall, 0.7, 1.2);
                const pNorm = (1.2 - pCapped) / (1.2 - 0.7);
                putCallScore = Math.round(pNorm * 100);
              }
            } catch {
              try {
                const cpce = await fetchJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5ECPCE?range=1mo&interval=1d');
                const closes = cpce.chart.result[0].indicators.quote[0].close;
                const v = lastNonNull(closes);
                if (v != null) {
                  putCall = v;
                  const pCapped = cap(putCall, 0.7, 1.2);
                  const pNorm = (1.2 - pCapped) / (1.2 - 0.7);
                  putCallScore = Math.round(pNorm * 100);
                }
              } catch {}
            }

            // 5. Junk Bond Demand (10% weight) - High-yield bond spread
            const fredCsv = await safeText('https://fred.stlouisfed.org/graph/fredgraph.csv?id=BAMLH0A0HYM2');
            let junkScore = 50;
            let junkSpread = DEFAULTS.junk;
            if (fredCsv) {
              const fredLines = fredCsv.trim().split('\n').slice(1);
              for (let i = fredLines.length - 1; i >= 0; i--) {
                const val = parseFloat(fredLines[i].split(',')[1]);
                if (!Number.isNaN(val)) {
                  junkSpread = val;
                  // CNN-style: 2-8 range, lower = more greed, more conservative
                  const jCapped = cap(junkSpread, 2, 8);
                  const jNorm = (8 - jCapped) / (8 - 2);
                  junkScore = Math.round(jNorm * 100);
                  break;
                }
              }
            }

            // 6. Market Breadth (10% weight) - New highs vs new lows
            const sp1y = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=1y&interval=1d');
            let breadthScore = 50;
            let spHigh = DEFAULTS.spHigh;
            let spLow = DEFAULTS.spLow;
            if (sp1y && sp1y.chart && sp1y.chart.result && sp1y.chart.result[0]) {
              const sp1yCloses = sp1y.chart.result[0].indicators.quote[0].close.filter(v => v != null);
              if (sp1yCloses.length > 0) {
                spHigh = Math.max(...sp1yCloses);
                spLow = Math.min(...sp1yCloses);
                // CNN-style: position within 52-week range, more conservative
                const breadthNorm = (currentSP - spLow) / (spHigh - spLow);
                breadthScore = Math.round(clamp01(breadthNorm) * 100);
              }
            }

            // 7. Market Volume (5% weight) - Volume relative to average
            const spVolume = await safeJSON('https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC?range=1mo&interval=1d');
            let volumeScore = 50;
            if (spVolume && spVolume.chart && spVolume.chart.result && spVolume.chart.result[0]) {
              const volumes = spVolume.chart.result[0].indicators.quote[0].volume.filter(v => v != null);
              if (volumes.length > 0) {
                const currentVolume = volumes[volumes.length - 1];
                const avgVolume = volumes.reduce((a, b) => a + b, 0) / volumes.length;
                const volumeRatio = currentVolume / avgVolume;
                // CNN-style: higher volume = more fear (panic selling/buying), more conservative
                const volumeCapped = cap(volumeRatio, 0.5, 2.0);
                const volumeNorm = (volumeCapped - 0.5) / 1.5;
                volumeScore = Math.round((1 - volumeNorm) * 100); // Invert: higher volume = lower score
              }
            }

            // Calculate weighted final score (CNN-style weights)
            const finalScore = Math.round(
              (vixScore * 0.25) +
              (momentumScore * 0.20) +
              (safeHavenScore * 0.15) +
              (putCallScore * 0.15) +
              (junkScore * 0.10) +
              (breadthScore * 0.10) +
              (volumeScore * 0.05)
            );

            const asOf = new Date().toISOString().slice(0,10);
            const out = {
              asOf,
              metrics: { 
                vix, 
                currentSP, 
                ma125, 
                bond10Y: DEFAULTS.bond10Y, // Keep for reference
                putCall, 
                junkSpread, 
                spHigh, 
                spLow, 
                usdDxy: DEFAULTS.usdCurrent // Keep for reference
              },
              scores: { 
                vixScore, 
                momentumScore, 
                safeHavenScore, 
                putCallScore, 
                junkScore, 
                breadthScore, 
                volumeScore, 
                finalScore 
              }
            };

            fs.mkdirSync('docs', { recursive: true });
            fs.writeFileSync('docs/daily.json', JSON.stringify(out, null, 2));
            console.log('Wrote docs/daily.json with CNN-style calculation');
          })().catch(e => {
            console.error('Fetch pipeline failed, writing fallback daily.json', e);
            const asOf = new Date().toISOString().slice(0,10);
            const out = {
              asOf,
              metrics: { 
                vix: DEFAULTS.vix, 
                currentSP: DEFAULTS.currentSP, 
                ma125: DEFAULTS.ma125, 
                bond10Y: DEFAULTS.bond10Y,
                putCall: DEFAULTS.putCall, 
                junkSpread: DEFAULTS.junk, 
                spHigh: DEFAULTS.spHigh, 
                spLow: DEFAULTS.spLow, 
                usdDxy: DEFAULTS.usdCurrent
              },
              scores: { 
                vixScore: 50, 
                momentumScore: 50, 
                safeHavenScore: 50, 
                putCallScore: 50, 
                junkScore: 50, 
                breadthScore: 50, 
                volumeScore: 50, 
                finalScore: 50 
              }
            };
            fs.mkdirSync('docs', { recursive: true });
            fs.writeFileSync('docs/daily.json', JSON.stringify(out, null, 2));
            console.log('Wrote fallback docs/daily.json');
            process.exit(0);
          });
          EOF

      - name: Build daily.json
        run: node /tmp/scripts/fetch_daily.js

      - name: Commit and push
        run: |
          # Git 설정
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Git 상태 확인
          echo "=== Git Status ==="
          git status
          
          # docs/daily.json이 존재하는지 확인
          if [ -f "docs/daily.json" ]; then
            echo "docs/daily.json exists, proceeding with commit"
            
            # docs/daily.json만 추가
            git add docs/daily.json
            
            # 변경사항이 있는지 확인
            if git diff --staged --quiet; then
              echo "No changes to commit - daily.json is up to date"
            else
              echo "Changes detected, committing..."
              git commit -m "chore: update daily sentiment with CNN-style calculation [skip ci]"
              
              # Push with retry logic
              for i in {1..3}; do
                echo "Attempting to push (attempt $i/3)..."
                if git push; then
                  echo "Push successful!"
                  break
                else
                  echo "Push failed, attempt $i/3"
                  if [ $i -eq 3 ]; then
                    echo "All push attempts failed"
                    exit 1
                  fi
                  sleep 5
                fi
              done
            fi
          else
            echo "docs/daily.json not found, skipping commit"
            exit 1
          fi


